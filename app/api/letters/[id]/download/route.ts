// app/api/letters/[id]/download/route.ts
import { NextRequest, NextResponse } from 'next/server'
import { getKindeServerSession } from '@kinde-oss/kinde-auth-nextjs/server'
import { getCurrentUser } from '@/lib/kinde'
import { prisma } from '@/lib/prisma'
import { getModelDisplayName } from '@/lib/config/modelDisplay'

// Convert markdown-like formatting to HTML for PDF
function markdownToHtml(content: string): string {
  return content
    // Convert headings (# Heading -> <h2>Heading</h2>)
    .replace(/^# (.+)$/gm, '<h2 style="font-size: 16pt; font-weight: bold; margin: 20px 0 10px 0; color: #333;">$1</h2>')
    .replace(/^## (.+)$/gm, '<h3 style="font-size: 14pt; font-weight: bold; margin: 18px 0 8px 0; color: #444;">$1</h3>')
    .replace(/^### (.+)$/gm, '<h4 style="font-size: 12pt; font-weight: bold; margin: 16px 0 6px 0; color: #555;">$1</h4>')
    
    // Convert bold text (**text** -> <strong>text</strong>)
    .replace(/\*\*(.+?)\*\*/g, '<strong style="font-weight: bold;">$1</strong>')
    
    // Convert paragraphs (double line breaks -> <p> tags)
    .split('\n\n')
    .map(paragraph => {
      const trimmed = paragraph.trim()
      if (trimmed && !trimmed.startsWith('<h')) {
        return `<p style="margin: 12px 0; text-align: justify; line-height: 1.7;">${trimmed}</p>`
      }
      return trimmed
    })
    .join('\n')
    
    // Convert single line breaks to <br> (but not after headings)
    .replace(/\n(?!<[hp])/g, '<br>')
}

export async function GET(
  req: NextRequest,
  { params }: { params: Promise<{ id: string }> }
) {
  try {
    const { getUser } = getKindeServerSession()
    const kindeUser = await getUser()

    if (!kindeUser) {
      return NextResponse.json({ error: 'Unauthorized' }, { status: 401 })
    }

    const user = await getCurrentUser()
    if (!user) {
      return NextResponse.json({ error: 'User not found' }, { status: 404 })
    }

    const { searchParams } = new URL(req.url)
    const format = searchParams.get('format') || 'txt'
    
    const resolvedParams = await params

    const letter = await prisma.generatedLetter.findFirst({
      where: {
        id: resolvedParams.id,
        userId: user.id
      }
    })

    if (!letter) {
      return NextResponse.json({ error: 'Letter not found' }, { status: 404 })
    }

    const countryInfo = {
      AUSTRALIA: 'Australian Student Visa',
      CANADA: 'Canadian Study Permit'
    }

    const filename = `${letter.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.${format}`
    
    if (format === 'txt') {
      // Return plain text file
      const headers = new Headers({
        'Content-Type': 'text/plain',
        'Content-Disposition': `attachment; filename="${filename}"`
      })

      const content = `${letter.title}

Generated on: ${new Date(letter.createdAt).toLocaleDateString()}
Document Type: ${letter.letterType.toUpperCase()}
Country: ${letter.country}
Purpose: ${countryInfo[letter.country as keyof typeof countryInfo]}
Word Count: ${letter.wordCount || 0} words
Generation Time: ${Math.round((letter.generationTime || 0) / 1000)}s
Model Used: ${getModelDisplayName(letter.modelUsed || 'AI')}

---

${letter.content}

---

Generated by SopeeAI
© ${new Date().getFullYear()} SopeeAI. All rights reserved.`

      return new NextResponse(content, { headers })
    }

    if (format === 'pdf') {
      // Convert markdown content to HTML
      const formattedContent = markdownToHtml(letter.content)
      
      // Get user subscription info for watermark
      const isFreeTier = user.subscriptionType === 'free'
      
      const htmlContent = `<!DOCTYPE html>
<html>
<head>
    <title>${letter.title}</title>
    <style>
        body {
            font-family: 'Times New Roman', serif;
            line-height: 1.6;
            margin: 40px;
            color: #333;
            font-size: 12pt;
        }
        .header {
            text-align: center;
            margin-bottom: 40px;
            border-bottom: 2px solid #333;
            padding-bottom: 20px;
        }
        .meta {
            font-size: 10pt;
            color: #666;
            margin-top: 10px;
            line-height: 1.4;
            text-align: center;
        }
        .content {
            font-size: 12pt;
            text-align: justify;
            margin: 40px 0;
            line-height: 1.7;
        }
        .footer {
            margin-top: 40px;
            padding-top: 20px;
            border-top: 1px solid #ccc;
            text-align: center;
            color: #666;
            font-size: 9pt;
            line-height: 1.4;
        }
        .upgrade-hint {
            color: #888;
            font-style: italic;
            margin-top: 8px;
            text-align: center;
        }
        h1 {
            margin: 0;
            font-size: 18pt;
            font-weight: bold;
        }
        h2 {
            font-size: 16pt;
            font-weight: bold;
            margin: 24px 0 12px 0;
            color: #333;
            page-break-after: avoid;
        }
        h3 {
            font-size: 14pt;
            font-weight: bold;
            margin: 20px 0 10px 0;
            color: #444;
            page-break-after: avoid;
        }
        h4 {
            font-size: 12pt;
            font-weight: bold;
            margin: 16px 0 8px 0;
            color: #555;
            page-break-after: avoid;
        }
        p {
            margin: 12px 0;
            text-align: justify;
            line-height: 1.7;
            orphans: 3;
            widows: 3;
        }
        strong {
            font-weight: bold;
        }
        @media print {
            body { 
                margin: 20px;
                font-size: 11pt;
            }
            .header { 
                page-break-after: avoid;
                margin-bottom: 30px;
            }
            .footer {
                page-break-before: avoid;
                margin-top: 30px;
                text-align: center;
            }
        }
        @page {
            margin: 2cm;
            size: A4;
        }
    </style>
</head>
<body>
    <div class="header">
        <h1 style="text-align: center;">${letter.title}</h1>
        <div class="meta">
            <p style="text-align: center;">Generated on ${new Date(letter.createdAt).toLocaleDateString()}</p>
            <p style="text-align: center;">${letter.country} • ${letter.letterType.toUpperCase()}</p>
            <p style="text-align: center;">${countryInfo[letter.country as keyof typeof countryInfo]}</p>
        </div>
    </div>
    
    <div class="content">
        ${formattedContent}
    </div>
    
    <div class="footer">
        <p style="text-align: center;">Generated by SopeeAI • Word Count: ${letter.wordCount || 0} words • Model: ${getModelDisplayName(letter.modelUsed || 'AI')}</p>
        <p style="text-align: center;">© ${new Date().getFullYear()} SopeeAI. All rights reserved.</p>
        ${isFreeTier ? '<p class="upgrade-hint" style="text-align: center;">Remove watermarks and unlock premium features by upgrading your plan at sopee.ai</p>' : ''}
    </div>
</body>
</html>`

      const headers = new Headers({
        'Content-Type': 'text/html',
        'Content-Disposition': `attachment; filename="${letter.title.replace(/[^a-z0-9]/gi, '_').toLowerCase()}.html"`
      })

      return new NextResponse(htmlContent, { headers })
    }

    return NextResponse.json({ error: 'Invalid format' }, { status: 400 })

  } catch (error) {
    console.error('Error downloading letter:', error)
    return NextResponse.json(
      { error: 'Internal server error' },
      { status: 500 }
    )
  }
}