// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id // Kinde user ID
  email             String    @unique
  firstName         String?
  lastName          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  subscriptionType  String    @default("free")
  lettersGenerated  Int       @default(0)
  lettersLimit      Int       @default(3)
  kindeOrgId        String?
  
  // New fields for country-specific flow
  targetCountry     Country?  
  onboardingStatus  OnboardingStatus @default(COUNTRY_SELECTION)
  onboardingStep    Int       @default(0)
  
  // Relations
  profiles          StudentProfile[]
  letters           GeneratedLetter[]
  documents         Document[]
  subscriptions     Subscription[]
  usageLogs         UsageLog[]
  
  @@map("users")
}

model StudentProfile {
  id                String    @id @default(cuid())
  userId            String
  personalInfo      Json
  academicBackground Json
  targetProgram     Json
  financialInfo     Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Country-specific fields
  country           Country
  profileCompleteness Float   @default(0)
  
  // Enhanced profile fields from real SOP analysis
  familyBackground     Json?
  workExperience       Json?
  extracurricularActivities Json?
  languageProficiency  Json?
  homeCountryTies      Json?
  futureCareerPlans    Json?
  whyThisCountry       Json?
  whyThisUniversity    Json?
  previousVisaHistory  Json?
  sponsorshipDetails   Json?
  maritalStatus        Json?
  
  // Additional comprehensive fields based on real SOPs
  passportNumber       String?
  parentsDetails       Json?    
  propertyOwnership    Boolean  @default(false)
  businessOwnership    Json?    
  travelingCompanion   Json?    
  programStructure     Json?    
  tuitionAndCosts      Json?     
  strongFamilyBonds    Json?    
  countryAdvantages    Json?   
  universityRanking    Json?    
  accommodationPlans   Json?  
  additionalCertifications Json?
  freelancingExperience Json?    
  salaryExpectations   Json?   
  homeCountryOpportunities Json? 
  
  // Additional missing fields from components
  entrepreneurialPlans Json?
  returnPlans         Json?
  additionalLanguageTests Json?
  familyInTargetCountry Json?
  additionalInfo      String?   // For "Any Other Relevant Information"
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  letters           GeneratedLetter[]
  documents         Document[]
  
  @@unique([userId, country])
  @@map("student_profiles")
}

model GeneratedLetter {
  id              String    @id @default(cuid())
  userId          String
  profileId       String?
  letterType      String    // 'explanation', 'study_plan', 'financial'
  title           String
  content         String    @db.Text
  modelUsed       String?
  generationTime  Int?      // milliseconds
  wordCount       Int?
  createdAt       DateTime  @default(now())
  feedbackRating  Int?      @db.SmallInt
  isFavorite      Boolean   @default(false)
  
  // New fields for pattern tracking and visa status
  country         Country
  patternsUsed    String[]
  confidenceScore Float?
  patternMatch    Float?
  isVisaApproved  Boolean?
  visaDecisionDate DateTime?
  adminNotes      String?
  rejectionReason String?
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile         StudentProfile? @relation(fields: [profileId], references: [id])
  
  @@map("generated_letters")
}

model Document {
  id              String    @id @default(cuid())
  userId          String
  profileId       String?
  fileName        String
  blobUrl         String
  blobPathname    String
  fileSize        Int?
  contentType     String?
  createdAt       DateTime  @default(now())
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile         StudentProfile? @relation(fields: [profileId], references: [id])
  
  @@map("documents")
}

model Subscription {
  id                String    @id @default(cuid())
  userId            String
  kindeSubscriptionId String  @unique
  status            String    // active, canceled, past_due, etc.
  planId            String
  planName          String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

model UsageLog {
  id        String    @id @default(cuid())
  userId    String
  action    String
  details   Json?
  createdAt DateTime  @default(now())
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("usage_logs")
}

// New models for training data and patterns
model TrainingDataEntry {
  id              String    @id @default(cuid())
  studentData     Json      // Complete student profile
  sopContent      String    @db.Text
  country         Country
  isApproved      Boolean
  submissionDate  DateTime
  decisionDate    DateTime?
  rejectionReason String?
  keySuccessFactors String[]
  extractedPatterns String[]
  createdAt       DateTime  @default(now())
  
  @@map("training_data_entries")
}

model SOPPattern {
  id              String      @id @default(cuid())
  country         Country
  patternType     PatternType
  content         String      @db.Text
  keyPhrases      String[]
  context         String      // family_ties, career_goals, etc.
  frequency       Int         @default(1)
  successRate     Float?
  lastUpdated     DateTime    @updatedAt
  createdAt       DateTime    @default(now())
  
  @@map("sop_patterns")
}

// Enums
enum Country {
  CANADA
  AUSTRALIA
}

enum OnboardingStatus {
  COUNTRY_SELECTION
  PROFILE_CREATION
  COMPLETED
}

enum PatternType {
  SUCCESS
  FAILURE
  NEUTRAL
}