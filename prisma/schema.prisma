// prisma/schema.prisma
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id                String    @id // Kinde user ID
  email             String    @unique
  firstName         String?
  lastName          String?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  subscriptionType  String    @default("free")
  lettersGenerated  Int       @default(0)
  lettersLimit      Int       @default(3)
  kindeOrgId        String?
  
  // Relations
  profiles          StudentProfile[]
  letters           GeneratedLetter[]
  documents         Document[]
  subscriptions     Subscription[]
  usageLogs         UsageLog[]
  
  @@map("users")
}

model StudentProfile {
  id                String    @id @default(cuid())
  userId            String
  personalInfo      Json
  academicBackground Json
  targetProgram     Json
  financialInfo     Json?
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  letters           GeneratedLetter[]
  documents         Document[]
  
  @@map("student_profiles")
}

model GeneratedLetter {
  id              String    @id @default(cuid())
  userId          String
  profileId       String?
  letterType      String    // 'explanation', 'study_plan', 'financial'
  title           String
  content         String    @db.Text
  modelUsed       String?
  generationTime  Int?      // milliseconds
  wordCount       Int?
  createdAt       DateTime  @default(now())
  feedbackRating  Int?      @db.SmallInt
  isFavorite      Boolean   @default(false)
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile         StudentProfile? @relation(fields: [profileId], references: [id])
  
  @@map("generated_letters")
}

model Document {
  id              String    @id @default(cuid())
  userId          String
  profileId       String?
  fileName        String
  blobUrl         String
  blobPathname    String
  fileSize        Int?
  contentType     String?
  createdAt       DateTime  @default(now())
  
  // Relations
  user            User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  profile         StudentProfile? @relation(fields: [profileId], references: [id])
  
  @@map("documents")
}

model Subscription {
  id                String    @id @default(cuid())
  userId            String
  kindeSubscriptionId String  @unique
  status            String    // active, canceled, past_due, etc.
  planId            String
  planName          String
  currentPeriodStart DateTime
  currentPeriodEnd   DateTime
  createdAt         DateTime  @default(now())
  updatedAt         DateTime  @updatedAt
  
  // Relations
  user              User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("subscriptions")
}

model UsageLog {
  id        String    @id @default(cuid())
  userId    String
  action    String
  details   Json?
  createdAt DateTime  @default(now())
  
  // Relations
  user      User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("usage_logs")
}